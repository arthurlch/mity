{"version":3,"sources":["src/models/User.ts","src/index.ts"],"names":[],"mappings":"cAAA;;;;;;ACAA,IAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA;ADmBA,IAAA,IAAA;ACjBA,ADiBA,ICjBM,IAAI,GAAG,IAAI,MAAA,CAAA,IAAJ,CAAS;AAAE,ADiBxB,ECjBwB,IAAI,EAAE,IDiB9B,ECjBsB;AAAgB,ADoBpC,ECpBoC,EAAE,EAAE,KDoBxC,IAAA,CAAoB,IAApB,EAAmC;ACpBf,ADoBA,CCpBT,CAAb,ODoBsB,IAAA,GAAA,IAAA;AClBtB,ADgBE,IChBE,CAAC,GAAL,CAAS,ADgBP,MAAA,GAAwC,EAAxC;AChBS,ADkB8B,EClB9B,IAAI,EAAE,SAAR;AAAmB,EAAA,EAAE,EAAE;AAAvB,ADoBP,CCpBF,CDoBE,IAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,QAAJ,EAAoB;AClBtB,ADmBI,OCnBG,CAAC,GAAR,ADmBW,CCnBC,IAAI,ADmBA,CCnBC,GAAL,ADmBD,CCnBU,ADmBA,MCnBT,CAAZ,CDmBW,CAAP;AClBJ,ADmBG,GAFD,ICjBK,CAAC,GAAR,CAAY,IAAI,CAAC,GAAL,CAAS,IAAT,CAAZ;;ADqBE,EAAA,IAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,MAAJ,EAAqB;AACnB,IAAA,MAAM,CAAC,MAAP,CAAc,KAAK,IAAnB,EAAyB,MAAzB;AACD,GAFD;;AAIA,EAAA,IAAA,CAAA,SAAA,CAAA,EAAA,GAAA,UAAG,SAAH,EAAsB,QAAtB,EAAwC,CAAU,CAAlD;;AACF,SAAA,IAAA;AAdA,CAAA,EAAA;;AAAa,OAAA,CAAA,IAAA,GAAA,IAAA","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["// User composition\n\n/* \nprivate date: UserProps to store data\nget(propsname) to get specific piece of data from user\nset(update, UserProps) change user data(UserProps) \non(eventName) event system, handle even for user object to syncronize changes in other files \n\n\n*/\n\ninterface UserProps {\n  name?: string;\n  id?: number;\n}\n\n// create callback, type function.\ntype Callback = () => void;\n\nexport class User {\n  events: { [key: string]: Callback[] } = {};\n\n  constructor(private data: UserProps) {}\n\n  get(propName: string): number | string {\n    return this.data[propName];\n  }\n\n  set(update: UserProps): void {\n    Object.assign(this.data, update);\n  }\n\n  on(eventName: string, callback: Callback): void {}\n}\n","import { User } from \"./models/User\";\n\nconst user = new User({ name: \"test\", id: 1 });\n\nuser.set({ name: \"newtest\", id: 2 });\n\nconsole.log(user.get(\"name\"));\nconsole.log(user.get(\"id\"));\n"]}